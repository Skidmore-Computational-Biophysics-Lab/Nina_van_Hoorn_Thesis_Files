{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "6771d3ad-f3a8-4fe1-9776-9c099b6cd6f0",
   "metadata": {},
   "source": [
    "File to run PCA on the simulation data using a python library rather than ptraj. The point of this is to compare the results and validate the ptraj scripts are working properly"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "e95bee7c-165f-4a44-8ac9-a17a4ba50122",
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import matplotlib.cm as cm\n",
    "from matplotlib.colors import LogNorm\n",
    "\n",
    "import mdtraj as md\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib.ticker as ticker\n",
    "\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.decomposition import PCA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "23085671-5c12-4b64-95ea-6dcd6087fec5",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load in the simulation data (every 10 frames)\n",
    "traj_new = []\n",
    "traj_new.append(md.load_netcdf(\"/data/nvanhoorn/A3F_newstructure/VCBC_A3F_GLU_mut/redoing_everything/mdcrd/VCBC-A3F_GLU_mut_sims1-8_first300_noBox.mdcrd\", \n",
    "                          top=\"/data/nvanhoorn/A3F_newstructure/VCBC_A3F_GLU_mut/redoing_everything/VCBC-A3F_GLU_mut_nowat.prmtop\", stride=10))\n",
    "traj_new.append(md.load_netcdf(\"/data/nvanhoorn/A3F_newstructure/VCBC_A3F_GLU_mut/redoing_everything/WT_files/VCBC-A3F_WT_sims1-8_first300_noBox.mdcrd\", \n",
    "                          top=\"/data/nvanhoorn/A3F_newstructure/VCBC_A3F_GLU_mut/redoing_everything/WT_files/VCBC-A3F_WT_nowat.prmtop\", stride=10))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "89a35cf4-c2b9-43fc-aca9-172106103261",
   "metadata": {},
   "outputs": [],
   "source": [
    "starting_struct = md.load_pdb(\"/data/nvanhoorn/A3F_newstructure/VCBC_A3F_GLU_mut/redoing_everything/WT_files/VCBC-A3F_WT_tleap.pdb\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "c20c91b4-838b-44c3-b76c-0c06633e8557",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<mdtraj.Trajectory with 48000 frames, 12053 atoms, 747 residues, without unitcells at 0x1554254801d0>,\n",
       " <mdtraj.Trajectory with 48000 frames, 12060 atoms, 747 residues, without unitcells at 0x1554118900b0>]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "traj_new"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "2ecc1dbd-64ba-4be0-89d2-0513438c4aa2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<mdtraj.Trajectory with 1 frames, 2968 atoms, 178 residues, without unitcells at 0x155411987e00>"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Remove atoms that are not a part of the backbone\n",
    "traj_new[0].atom_slice(traj_new[0].topology.select('backbone'), inplace=True)\n",
    "traj_new[1].atom_slice(traj_new[1].topology.select('backbone'), inplace=True)\n",
    "starting_struct.atom_slice(traj_new[1].topology.select('backbone'), inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "74d29949-0d73-4cf4-82e0-48cd3109bac1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<mdtraj.Trajectory with 1 frames, 2968 atoms, 178 residues, without unitcells at 0x155411987e00>"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# # align the trajectories\n",
    "traj_new[1].superpose(traj_new[0])\n",
    "traj_new[0].superpose(traj_new[0])\n",
    "starting_struct.superpose(traj_new[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "af0f318f-1cc6-43f6-afc0-8bf33a4d865c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(48000, 2968, 3) (48000, 2968, 3) (1, 2968, 3)\n"
     ]
    }
   ],
   "source": [
    "# Extract the x,y,z coordinates fromt the trajectory objects\n",
    "coordinatesGLU = traj_new[0].xyz\n",
    "coordinatesWT = traj_new[1].xyz\n",
    "Startcoordinates = starting_struct.xyz\n",
    "\n",
    "print(coordinatesGLU.shape, coordinatesWT.shape, Startcoordinates.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "f98e2e58-ac7a-4603-85c4-20e7ab0425d7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(96000, 2968, 3)\n"
     ]
    }
   ],
   "source": [
    "train_data = np.concatenate((coordinatesGLU, coordinatesWT))\n",
    "\n",
    "print(train_data.shape)  \n",
    "\n",
    "train_data = train_data[::]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "3a7005e3-db44-463c-b302-8688c336764b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(96000, 8904)\n"
     ]
    }
   ],
   "source": [
    "# Flatten to (n_frames, n_atoms * 3)\n",
    "\n",
    "train_data = train_data.reshape(train_data.shape[0], -1) \n",
    "start_struct_data = Startcoordinates.reshape(Startcoordinates.shape[0], -1)\n",
    "print(train_data.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "87a990e0-3aeb-476c-a146-e6e8a58d1739",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 2.7646387,  4.792783 , 11.494975 , ...,  4.0472684,  3.3697793,\n",
       "        14.09084  ],\n",
       "       [ 2.735433 ,  4.787917 , 11.636822 , ...,  4.160372 ,  3.1476872,\n",
       "        14.345175 ],\n",
       "       [ 2.780947 ,  4.8121715, 11.521578 , ...,  4.199376 ,  3.5639646,\n",
       "        14.124228 ],\n",
       "       ...,\n",
       "       [ 3.1386228,  4.244601 , 12.302906 , ...,  4.2199764,  2.8939617,\n",
       "        13.880112 ],\n",
       "       [ 3.0978749,  4.393424 , 12.362138 , ...,  4.200395 ,  2.8731737,\n",
       "        13.848095 ],\n",
       "       [ 3.131182 ,  4.2506995, 12.338176 , ...,  4.292874 ,  2.7783258,\n",
       "        13.914901 ]], dtype=float32)"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "368a697a-225e-47c8-a40f-d0db801a0325",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Scaling the data was originall included in this analysis, but on later consideration was removed \n",
    "\n",
    "# scaler = StandardScaler()\n",
    "# train_data = scaler.fit_transform(train_data)\n",
    "# start_struct_data = scaler.transform(start_struct_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "6923859f-468c-4d34-ba9f-363d443938b9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 2.7646387,  4.792783 , 11.494975 , ...,  4.0472684,  3.3697793,\n",
       "        14.09084  ],\n",
       "       [ 2.735433 ,  4.787917 , 11.636822 , ...,  4.160372 ,  3.1476872,\n",
       "        14.345175 ],\n",
       "       [ 2.780947 ,  4.8121715, 11.521578 , ...,  4.199376 ,  3.5639646,\n",
       "        14.124228 ],\n",
       "       ...,\n",
       "       [ 3.1386228,  4.244601 , 12.302906 , ...,  4.2199764,  2.8939617,\n",
       "        13.880112 ],\n",
       "       [ 3.0978749,  4.393424 , 12.362138 , ...,  4.200395 ,  2.8731737,\n",
       "        13.848095 ],\n",
       "       [ 3.131182 ,  4.2506995, 12.338176 , ...,  4.292874 ,  2.7783258,\n",
       "        13.914901 ]], dtype=float32)"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "87bc0663-65ed-44a1-9877-623ba80fe7c7",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "1b4f334b-a6ae-4b6f-b39d-f52c151ea1be",
   "metadata": {},
   "outputs": [],
   "source": [
    "# PCA tutorial used : https://www.geeksforgeeks.org/principal-component-analysis-pca/"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "02002a77-47fe-4ed4-88e5-1b7803bdd82c",
   "metadata": {},
   "outputs": [],
   "source": [
    "n_components=10\n",
    "pca = PCA(n_components=n_components)\n",
    "pca.fit(train_data)\n",
    "\n",
    "\n",
    "x_pca = pca.transform(train_data)\n",
    "\n",
    "# Create the dataframe\n",
    "df_pca1 = pd.DataFrame(x_pca,\n",
    "                       columns=['PC{}'.\n",
    "                       format(i+1)\n",
    "                        for i in range(n_components)])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "9b603e16-8ebf-4b58-988d-133bb2c29f4d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PC1</th>\n",
       "      <th>PC2</th>\n",
       "      <th>PC3</th>\n",
       "      <th>PC4</th>\n",
       "      <th>PC5</th>\n",
       "      <th>PC6</th>\n",
       "      <th>PC7</th>\n",
       "      <th>PC8</th>\n",
       "      <th>PC9</th>\n",
       "      <th>PC10</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-5.820284</td>\n",
       "      <td>3.195984</td>\n",
       "      <td>-2.218050</td>\n",
       "      <td>0.146341</td>\n",
       "      <td>5.076250</td>\n",
       "      <td>3.797890</td>\n",
       "      <td>4.047328</td>\n",
       "      <td>1.672291</td>\n",
       "      <td>0.488688</td>\n",
       "      <td>6.193590</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>-8.890532</td>\n",
       "      <td>5.824661</td>\n",
       "      <td>-4.152231</td>\n",
       "      <td>-0.598236</td>\n",
       "      <td>6.104238</td>\n",
       "      <td>3.900684</td>\n",
       "      <td>4.510113</td>\n",
       "      <td>0.794353</td>\n",
       "      <td>0.564254</td>\n",
       "      <td>5.716427</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>-8.738932</td>\n",
       "      <td>6.591873</td>\n",
       "      <td>-4.027632</td>\n",
       "      <td>-0.679674</td>\n",
       "      <td>5.944344</td>\n",
       "      <td>3.759094</td>\n",
       "      <td>4.312703</td>\n",
       "      <td>0.621958</td>\n",
       "      <td>0.635967</td>\n",
       "      <td>5.891228</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-10.308588</td>\n",
       "      <td>9.415619</td>\n",
       "      <td>-1.589283</td>\n",
       "      <td>-1.059469</td>\n",
       "      <td>5.074379</td>\n",
       "      <td>3.998547</td>\n",
       "      <td>3.602193</td>\n",
       "      <td>-0.168768</td>\n",
       "      <td>-0.379731</td>\n",
       "      <td>6.169176</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>-11.060031</td>\n",
       "      <td>9.325226</td>\n",
       "      <td>-1.786249</td>\n",
       "      <td>-1.058859</td>\n",
       "      <td>5.320195</td>\n",
       "      <td>3.912222</td>\n",
       "      <td>4.161340</td>\n",
       "      <td>-0.194008</td>\n",
       "      <td>-0.991331</td>\n",
       "      <td>6.208969</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>95995</th>\n",
       "      <td>-5.786688</td>\n",
       "      <td>9.325516</td>\n",
       "      <td>-3.622253</td>\n",
       "      <td>6.509378</td>\n",
       "      <td>-11.272997</td>\n",
       "      <td>1.187820</td>\n",
       "      <td>-1.850187</td>\n",
       "      <td>-1.066032</td>\n",
       "      <td>-0.813914</td>\n",
       "      <td>-4.557680</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>95996</th>\n",
       "      <td>-6.263166</td>\n",
       "      <td>9.752960</td>\n",
       "      <td>-4.100929</td>\n",
       "      <td>6.050375</td>\n",
       "      <td>-10.211205</td>\n",
       "      <td>1.002174</td>\n",
       "      <td>-1.471881</td>\n",
       "      <td>-0.787956</td>\n",
       "      <td>-0.288327</td>\n",
       "      <td>-4.670377</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>95997</th>\n",
       "      <td>-5.698805</td>\n",
       "      <td>10.222862</td>\n",
       "      <td>-3.436272</td>\n",
       "      <td>8.074413</td>\n",
       "      <td>-9.807123</td>\n",
       "      <td>0.522169</td>\n",
       "      <td>-1.650464</td>\n",
       "      <td>0.196268</td>\n",
       "      <td>0.232430</td>\n",
       "      <td>-4.399607</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>95998</th>\n",
       "      <td>-6.074854</td>\n",
       "      <td>9.222466</td>\n",
       "      <td>-2.664772</td>\n",
       "      <td>7.640638</td>\n",
       "      <td>-10.268677</td>\n",
       "      <td>0.186563</td>\n",
       "      <td>-1.775302</td>\n",
       "      <td>-0.269892</td>\n",
       "      <td>-0.103209</td>\n",
       "      <td>-4.354638</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>95999</th>\n",
       "      <td>-5.276102</td>\n",
       "      <td>8.666847</td>\n",
       "      <td>-3.392538</td>\n",
       "      <td>7.624512</td>\n",
       "      <td>-9.564596</td>\n",
       "      <td>-0.120960</td>\n",
       "      <td>-2.641543</td>\n",
       "      <td>-1.611595</td>\n",
       "      <td>-0.528189</td>\n",
       "      <td>-4.060397</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>96000 rows × 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "             PC1        PC2       PC3       PC4        PC5       PC6  \\\n",
       "0      -5.820284   3.195984 -2.218050  0.146341   5.076250  3.797890   \n",
       "1      -8.890532   5.824661 -4.152231 -0.598236   6.104238  3.900684   \n",
       "2      -8.738932   6.591873 -4.027632 -0.679674   5.944344  3.759094   \n",
       "3     -10.308588   9.415619 -1.589283 -1.059469   5.074379  3.998547   \n",
       "4     -11.060031   9.325226 -1.786249 -1.058859   5.320195  3.912222   \n",
       "...          ...        ...       ...       ...        ...       ...   \n",
       "95995  -5.786688   9.325516 -3.622253  6.509378 -11.272997  1.187820   \n",
       "95996  -6.263166   9.752960 -4.100929  6.050375 -10.211205  1.002174   \n",
       "95997  -5.698805  10.222862 -3.436272  8.074413  -9.807123  0.522169   \n",
       "95998  -6.074854   9.222466 -2.664772  7.640638 -10.268677  0.186563   \n",
       "95999  -5.276102   8.666847 -3.392538  7.624512  -9.564596 -0.120960   \n",
       "\n",
       "            PC7       PC8       PC9      PC10  \n",
       "0      4.047328  1.672291  0.488688  6.193590  \n",
       "1      4.510113  0.794353  0.564254  5.716427  \n",
       "2      4.312703  0.621958  0.635967  5.891228  \n",
       "3      3.602193 -0.168768 -0.379731  6.169176  \n",
       "4      4.161340 -0.194008 -0.991331  6.208969  \n",
       "...         ...       ...       ...       ...  \n",
       "95995 -1.850187 -1.066032 -0.813914 -4.557680  \n",
       "95996 -1.471881 -0.787956 -0.288327 -4.670377  \n",
       "95997 -1.650464  0.196268  0.232430 -4.399607  \n",
       "95998 -1.775302 -0.269892 -0.103209 -4.354638  \n",
       "95999 -2.641543 -1.611595 -0.528189 -4.060397  \n",
       "\n",
       "[96000 rows x 10 columns]"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_pca1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "1d111737-0d51-49ed-b8e3-b248c9cf3262",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(8, 6))\n",
    "\n",
    "plt.scatter(x_pca[:, 0], x_pca[:, 1], c='black')\n",
    "\n",
    "plt.xlim([-125,200])\n",
    "plt.ylim([-150,150])\n",
    "plt.title('Combined Data')\n",
    "plt.xlabel('First Principal Component')\n",
    "plt.ylabel('Second Principal Component')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "81931bb7-46b9-4925-b235-9f007fa42e1b",
   "metadata": {},
   "outputs": [],
   "source": [
    "GLU_data = coordinatesGLU.reshape(coordinatesGLU.shape[0], -1) \n",
    "WT_data = coordinatesWT.reshape(coordinatesWT.shape[0], -1) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "34cd3f5c-6853-4ff4-8cfd-0335c3524d3b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# GLU_data = scaler.transform(GLU_data)\n",
    "# WT_data = scaler.transform(WT_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "1de1abec-6a14-41aa-84aa-d206ae96ea7c",
   "metadata": {},
   "outputs": [],
   "source": [
    "GLU_pca = pca.transform(GLU_data)\n",
    "\n",
    "# Create the dataframe\n",
    "df_pca_GLU = pd.DataFrame(GLU_pca,\n",
    "                       columns=['PC{}'.\n",
    "                       format(i+1)\n",
    "                        for i in range(n_components)])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "db55714d-bc7b-4b5f-b08e-4b46a7605740",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PC1</th>\n",
       "      <th>PC2</th>\n",
       "      <th>PC3</th>\n",
       "      <th>PC4</th>\n",
       "      <th>PC5</th>\n",
       "      <th>PC6</th>\n",
       "      <th>PC7</th>\n",
       "      <th>PC8</th>\n",
       "      <th>PC9</th>\n",
       "      <th>PC10</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-5.820284</td>\n",
       "      <td>3.195984</td>\n",
       "      <td>-2.218050</td>\n",
       "      <td>0.146341</td>\n",
       "      <td>5.076250</td>\n",
       "      <td>3.797890</td>\n",
       "      <td>4.047328</td>\n",
       "      <td>1.672291</td>\n",
       "      <td>0.488688</td>\n",
       "      <td>6.193590</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>-8.890532</td>\n",
       "      <td>5.824661</td>\n",
       "      <td>-4.152231</td>\n",
       "      <td>-0.598236</td>\n",
       "      <td>6.104238</td>\n",
       "      <td>3.900684</td>\n",
       "      <td>4.510113</td>\n",
       "      <td>0.794353</td>\n",
       "      <td>0.564254</td>\n",
       "      <td>5.716427</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>-8.738932</td>\n",
       "      <td>6.591873</td>\n",
       "      <td>-4.027632</td>\n",
       "      <td>-0.679674</td>\n",
       "      <td>5.944344</td>\n",
       "      <td>3.759094</td>\n",
       "      <td>4.312703</td>\n",
       "      <td>0.621958</td>\n",
       "      <td>0.635967</td>\n",
       "      <td>5.891228</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-10.308588</td>\n",
       "      <td>9.415619</td>\n",
       "      <td>-1.589283</td>\n",
       "      <td>-1.059469</td>\n",
       "      <td>5.074379</td>\n",
       "      <td>3.998547</td>\n",
       "      <td>3.602193</td>\n",
       "      <td>-0.168768</td>\n",
       "      <td>-0.379731</td>\n",
       "      <td>6.169176</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>-11.060031</td>\n",
       "      <td>9.325226</td>\n",
       "      <td>-1.786249</td>\n",
       "      <td>-1.058859</td>\n",
       "      <td>5.320195</td>\n",
       "      <td>3.912222</td>\n",
       "      <td>4.161340</td>\n",
       "      <td>-0.194008</td>\n",
       "      <td>-0.991331</td>\n",
       "      <td>6.208969</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47995</th>\n",
       "      <td>-9.843641</td>\n",
       "      <td>-3.194298</td>\n",
       "      <td>-2.803671</td>\n",
       "      <td>0.091932</td>\n",
       "      <td>5.501338</td>\n",
       "      <td>-2.025431</td>\n",
       "      <td>-8.801943</td>\n",
       "      <td>-0.740791</td>\n",
       "      <td>-6.712396</td>\n",
       "      <td>4.087326</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47996</th>\n",
       "      <td>-10.087770</td>\n",
       "      <td>-3.547142</td>\n",
       "      <td>-4.636581</td>\n",
       "      <td>0.446619</td>\n",
       "      <td>6.293495</td>\n",
       "      <td>-2.731409</td>\n",
       "      <td>-8.037949</td>\n",
       "      <td>-0.595888</td>\n",
       "      <td>-5.638867</td>\n",
       "      <td>2.894163</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47997</th>\n",
       "      <td>-9.638826</td>\n",
       "      <td>-5.066566</td>\n",
       "      <td>-4.219627</td>\n",
       "      <td>1.557968</td>\n",
       "      <td>5.932402</td>\n",
       "      <td>-2.025724</td>\n",
       "      <td>-8.716490</td>\n",
       "      <td>-1.858461</td>\n",
       "      <td>-5.792474</td>\n",
       "      <td>2.728052</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47998</th>\n",
       "      <td>-8.151779</td>\n",
       "      <td>-5.121498</td>\n",
       "      <td>-3.284769</td>\n",
       "      <td>1.729427</td>\n",
       "      <td>6.084953</td>\n",
       "      <td>-1.790972</td>\n",
       "      <td>-9.580210</td>\n",
       "      <td>-2.262411</td>\n",
       "      <td>-5.690726</td>\n",
       "      <td>3.119051</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47999</th>\n",
       "      <td>-7.902151</td>\n",
       "      <td>-5.364250</td>\n",
       "      <td>-2.889389</td>\n",
       "      <td>1.260298</td>\n",
       "      <td>4.976274</td>\n",
       "      <td>-0.309084</td>\n",
       "      <td>-8.860956</td>\n",
       "      <td>-2.594009</td>\n",
       "      <td>-5.310248</td>\n",
       "      <td>2.924655</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>48000 rows × 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "             PC1       PC2       PC3       PC4       PC5       PC6       PC7  \\\n",
       "0      -5.820284  3.195984 -2.218050  0.146341  5.076250  3.797890  4.047328   \n",
       "1      -8.890532  5.824661 -4.152231 -0.598236  6.104238  3.900684  4.510113   \n",
       "2      -8.738932  6.591873 -4.027632 -0.679674  5.944344  3.759094  4.312703   \n",
       "3     -10.308588  9.415619 -1.589283 -1.059469  5.074379  3.998547  3.602193   \n",
       "4     -11.060031  9.325226 -1.786249 -1.058859  5.320195  3.912222  4.161340   \n",
       "...          ...       ...       ...       ...       ...       ...       ...   \n",
       "47995  -9.843641 -3.194298 -2.803671  0.091932  5.501338 -2.025431 -8.801943   \n",
       "47996 -10.087770 -3.547142 -4.636581  0.446619  6.293495 -2.731409 -8.037949   \n",
       "47997  -9.638826 -5.066566 -4.219627  1.557968  5.932402 -2.025724 -8.716490   \n",
       "47998  -8.151779 -5.121498 -3.284769  1.729427  6.084953 -1.790972 -9.580210   \n",
       "47999  -7.902151 -5.364250 -2.889389  1.260298  4.976274 -0.309084 -8.860956   \n",
       "\n",
       "            PC8       PC9      PC10  \n",
       "0      1.672291  0.488688  6.193590  \n",
       "1      0.794353  0.564254  5.716427  \n",
       "2      0.621958  0.635967  5.891228  \n",
       "3     -0.168768 -0.379731  6.169176  \n",
       "4     -0.194008 -0.991331  6.208969  \n",
       "...         ...       ...       ...  \n",
       "47995 -0.740791 -6.712396  4.087326  \n",
       "47996 -0.595888 -5.638867  2.894163  \n",
       "47997 -1.858461 -5.792474  2.728052  \n",
       "47998 -2.262411 -5.690726  3.119051  \n",
       "47999 -2.594009 -5.310248  2.924655  \n",
       "\n",
       "[48000 rows x 10 columns]"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_pca_GLU"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "8ad5ffd6-5fbd-403a-90f3-f99384d63eed",
   "metadata": {},
   "outputs": [],
   "source": [
    "WT_pca = pca.transform(WT_data)\n",
    "\n",
    "# Create the dataframe\n",
    "df_pca_WT = pd.DataFrame(WT_pca,\n",
    "                       columns=['PC{}'.\n",
    "                       format(i+1)\n",
    "                        for i in range(n_components)])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "0a1b4827-4a97-4888-9097-5850ffcc8b34",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PC1</th>\n",
       "      <th>PC2</th>\n",
       "      <th>PC3</th>\n",
       "      <th>PC4</th>\n",
       "      <th>PC5</th>\n",
       "      <th>PC6</th>\n",
       "      <th>PC7</th>\n",
       "      <th>PC8</th>\n",
       "      <th>PC9</th>\n",
       "      <th>PC10</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-2.263340</td>\n",
       "      <td>12.536804</td>\n",
       "      <td>-4.521706</td>\n",
       "      <td>0.269506</td>\n",
       "      <td>7.320526</td>\n",
       "      <td>3.741549</td>\n",
       "      <td>2.768171</td>\n",
       "      <td>1.070818</td>\n",
       "      <td>-1.451915</td>\n",
       "      <td>5.174308</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>-1.452936</td>\n",
       "      <td>12.356377</td>\n",
       "      <td>-5.652058</td>\n",
       "      <td>-0.838011</td>\n",
       "      <td>7.920025</td>\n",
       "      <td>2.716652</td>\n",
       "      <td>3.448796</td>\n",
       "      <td>2.213577</td>\n",
       "      <td>-1.055532</td>\n",
       "      <td>5.122204</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>-4.692616</td>\n",
       "      <td>10.940346</td>\n",
       "      <td>-6.266407</td>\n",
       "      <td>0.111252</td>\n",
       "      <td>7.439500</td>\n",
       "      <td>2.540829</td>\n",
       "      <td>3.933301</td>\n",
       "      <td>2.143396</td>\n",
       "      <td>-1.097136</td>\n",
       "      <td>6.058153</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-4.365309</td>\n",
       "      <td>9.303284</td>\n",
       "      <td>-6.134287</td>\n",
       "      <td>1.788588</td>\n",
       "      <td>8.002278</td>\n",
       "      <td>3.539360</td>\n",
       "      <td>4.084660</td>\n",
       "      <td>2.648302</td>\n",
       "      <td>1.317912</td>\n",
       "      <td>4.881028</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>-2.000879</td>\n",
       "      <td>8.272919</td>\n",
       "      <td>-6.178444</td>\n",
       "      <td>2.904318</td>\n",
       "      <td>8.962742</td>\n",
       "      <td>4.763638</td>\n",
       "      <td>5.298788</td>\n",
       "      <td>2.129433</td>\n",
       "      <td>2.654999</td>\n",
       "      <td>3.363351</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47995</th>\n",
       "      <td>-5.786688</td>\n",
       "      <td>9.325516</td>\n",
       "      <td>-3.622253</td>\n",
       "      <td>6.509378</td>\n",
       "      <td>-11.272997</td>\n",
       "      <td>1.187820</td>\n",
       "      <td>-1.850187</td>\n",
       "      <td>-1.066032</td>\n",
       "      <td>-0.813914</td>\n",
       "      <td>-4.557680</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47996</th>\n",
       "      <td>-6.263166</td>\n",
       "      <td>9.752960</td>\n",
       "      <td>-4.100929</td>\n",
       "      <td>6.050375</td>\n",
       "      <td>-10.211205</td>\n",
       "      <td>1.002174</td>\n",
       "      <td>-1.471881</td>\n",
       "      <td>-0.787956</td>\n",
       "      <td>-0.288327</td>\n",
       "      <td>-4.670377</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47997</th>\n",
       "      <td>-5.698805</td>\n",
       "      <td>10.222862</td>\n",
       "      <td>-3.436272</td>\n",
       "      <td>8.074413</td>\n",
       "      <td>-9.807123</td>\n",
       "      <td>0.522169</td>\n",
       "      <td>-1.650464</td>\n",
       "      <td>0.196268</td>\n",
       "      <td>0.232430</td>\n",
       "      <td>-4.399607</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47998</th>\n",
       "      <td>-6.074854</td>\n",
       "      <td>9.222466</td>\n",
       "      <td>-2.664772</td>\n",
       "      <td>7.640638</td>\n",
       "      <td>-10.268677</td>\n",
       "      <td>0.186563</td>\n",
       "      <td>-1.775302</td>\n",
       "      <td>-0.269892</td>\n",
       "      <td>-0.103209</td>\n",
       "      <td>-4.354638</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47999</th>\n",
       "      <td>-5.276102</td>\n",
       "      <td>8.666847</td>\n",
       "      <td>-3.392538</td>\n",
       "      <td>7.624512</td>\n",
       "      <td>-9.564596</td>\n",
       "      <td>-0.120960</td>\n",
       "      <td>-2.641543</td>\n",
       "      <td>-1.611595</td>\n",
       "      <td>-0.528189</td>\n",
       "      <td>-4.060397</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>48000 rows × 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            PC1        PC2       PC3       PC4        PC5       PC6       PC7  \\\n",
       "0     -2.263340  12.536804 -4.521706  0.269506   7.320526  3.741549  2.768171   \n",
       "1     -1.452936  12.356377 -5.652058 -0.838011   7.920025  2.716652  3.448796   \n",
       "2     -4.692616  10.940346 -6.266407  0.111252   7.439500  2.540829  3.933301   \n",
       "3     -4.365309   9.303284 -6.134287  1.788588   8.002278  3.539360  4.084660   \n",
       "4     -2.000879   8.272919 -6.178444  2.904318   8.962742  4.763638  5.298788   \n",
       "...         ...        ...       ...       ...        ...       ...       ...   \n",
       "47995 -5.786688   9.325516 -3.622253  6.509378 -11.272997  1.187820 -1.850187   \n",
       "47996 -6.263166   9.752960 -4.100929  6.050375 -10.211205  1.002174 -1.471881   \n",
       "47997 -5.698805  10.222862 -3.436272  8.074413  -9.807123  0.522169 -1.650464   \n",
       "47998 -6.074854   9.222466 -2.664772  7.640638 -10.268677  0.186563 -1.775302   \n",
       "47999 -5.276102   8.666847 -3.392538  7.624512  -9.564596 -0.120960 -2.641543   \n",
       "\n",
       "            PC8       PC9      PC10  \n",
       "0      1.070818 -1.451915  5.174308  \n",
       "1      2.213577 -1.055532  5.122204  \n",
       "2      2.143396 -1.097136  6.058153  \n",
       "3      2.648302  1.317912  4.881028  \n",
       "4      2.129433  2.654999  3.363351  \n",
       "...         ...       ...       ...  \n",
       "47995 -1.066032 -0.813914 -4.557680  \n",
       "47996 -0.787956 -0.288327 -4.670377  \n",
       "47997  0.196268  0.232430 -4.399607  \n",
       "47998 -0.269892 -0.103209 -4.354638  \n",
       "47999 -1.611595 -0.528189 -4.060397  \n",
       "\n",
       "[48000 rows x 10 columns]"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_pca_WT"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "df75cf50-4eaa-4b86-bc73-69d70a18d162",
   "metadata": {},
   "outputs": [],
   "source": [
    "struct_pca = pca.transform(start_struct_data)\n",
    "\n",
    "# Create the dataframe\n",
    "df_pca_struct = pd.DataFrame(struct_pca,\n",
    "                       columns=['PC{}'.\n",
    "                       format(i+1)\n",
    "                        for i in range(n_components)])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "732b6ceb-5688-4638-8b79-560be4756b1d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PC1</th>\n",
       "      <th>PC2</th>\n",
       "      <th>PC3</th>\n",
       "      <th>PC4</th>\n",
       "      <th>PC5</th>\n",
       "      <th>PC6</th>\n",
       "      <th>PC7</th>\n",
       "      <th>PC8</th>\n",
       "      <th>PC9</th>\n",
       "      <th>PC10</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-14.959696</td>\n",
       "      <td>67.786713</td>\n",
       "      <td>11.538955</td>\n",
       "      <td>29.569107</td>\n",
       "      <td>26.810833</td>\n",
       "      <td>30.032497</td>\n",
       "      <td>6.147161</td>\n",
       "      <td>-26.779322</td>\n",
       "      <td>21.360579</td>\n",
       "      <td>-14.249186</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         PC1        PC2        PC3        PC4        PC5        PC6       PC7  \\\n",
       "0 -14.959696  67.786713  11.538955  29.569107  26.810833  30.032497  6.147161   \n",
       "\n",
       "         PC8        PC9       PC10  \n",
       "0 -26.779322  21.360579 -14.249186  "
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_pca_struct"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d8101d8-316f-4619-b946-e0a1a10f208c",
   "metadata": {},
   "source": [
    "### Classic figures"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "7470428f-4e90-4073-83f8-a1a4cbe943bf",
   "metadata": {},
   "outputs": [],
   "source": [
    "PC1min = min(min(GLU_pca[:, 0]), min(WT_pca[:, 0])) - 25\n",
    "PC1max = max(max(GLU_pca[:, 0]), max(WT_pca[:, 0])) + 25\n",
    "PC2min = min(min(GLU_pca[:, 1]), min(WT_pca[:, 1])) - 25\n",
    "PC2max = max(max(GLU_pca[:, 1]), max(WT_pca[:, 1])) + 25\n",
    "PC3min = min(min(GLU_pca[:, 2]), min(WT_pca[:, 2])) - 25\n",
    "PC3max = max(max(GLU_pca[:, 2]), max(WT_pca[:, 2])) + 25\n",
    "PC4min = min(min(GLU_pca[:, 3]), min(WT_pca[:, 3])) - 25\n",
    "PC4max = max(max(GLU_pca[:, 3]), max(WT_pca[:, 3])) + 25"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "33e55334-e676-4ac9-900e-adcef90a4510",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'PC2')"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1450x900 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "binedges = np.arange(-550,550,1) # create array for bin edges\n",
    "GLU_fig = np.histogram2d(df_pca1['PC1'], df_pca1['PC2'], \n",
    "                         bins=binedges)\n",
    "max_shade = GLU_fig[0].max()\n",
    "PC1_2_colormap = plt.figure(figsize=(14.5,9))\n",
    "plt.subplot(1, 2, 1)\n",
    "PC2_VCBC, PC1_VCBC = np.meshgrid(binedges,binedges) \n",
    "plt.pcolormesh(PC1_VCBC, PC2_VCBC, GLU_fig[0], cmap = 'Greys', vmax = max_shade)\n",
    "plt.axis('image')\n",
    "plt.xlim([PC1min, PC1max])\n",
    "plt.ylim([PC2min, PC2max])\n",
    "def fmt(x, pos):\n",
    "    a, b = '{:.2e}'.format(x).split('e')\n",
    "    b = int(b)\n",
    "    return r'${} \\times 10^{{{}}}$'.format(a, b)\n",
    "plt.colorbar(shrink = 0.50, format=ticker.FuncFormatter(fmt))\n",
    "plt.scatter(x = df_pca_struct[\"PC1\"][0], y = df_pca_struct[\"PC2\"][0], color='k', \n",
    "         marker='x', s = 75, linewidth = 1, label = \"VCBC pdb\")\n",
    "plt.title('Combined', size= 18) \n",
    "plt.xlabel('PC1',size= 16) \n",
    "plt.ylabel('PC2',size= 16)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "6247df39-79f2-4096-a953-76872281937f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'PC2')"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1450x900 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "binedges = np.arange(-550,550,1) # create array for bin edges\n",
    "GLU_fig = np.histogram2d(df_pca_GLU['PC1'], df_pca_GLU['PC2'], \n",
    "                         bins=binedges)\n",
    "max_shade = GLU_fig[0].max()\n",
    "PC1_2_colormap = plt.figure(figsize=(14.5,9))\n",
    "plt.subplot(1, 2, 1)\n",
    "PC2_VCBC, PC1_VCBC = np.meshgrid(binedges,binedges) \n",
    "plt.pcolormesh(PC1_VCBC, PC2_VCBC, GLU_fig[0], cmap = 'Greys', vmax = max_shade)\n",
    "plt.axis('image')\n",
    "plt.xlim([PC1min, PC1max])\n",
    "plt.ylim([PC2min, PC2max])\n",
    "def fmt(x, pos):\n",
    "    a, b = '{:.2e}'.format(x).split('e')\n",
    "    b = int(b)\n",
    "    return r'${} \\times 10^{{{}}}$'.format(a, b)\n",
    "plt.colorbar(shrink = 0.50, format=ticker.FuncFormatter(fmt))\n",
    "plt.scatter(x = df_pca_struct[\"PC1\"][0], y = df_pca_struct[\"PC2\"][0], color='k', \n",
    "         marker='x', s = 75, linewidth = 1, label = \"VCBC pdb\")\n",
    "plt.title('GLU_mutation', size= 18) \n",
    "plt.xlabel('PC1',size= 16) \n",
    "plt.ylabel('PC2',size= 16)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "70fd88c7-f691-4e6e-ac5b-a63b0233fc21",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'PC2')"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1450x900 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "binedges = np.arange(-550,550,1) # create array for bin edges\n",
    "\n",
    "WT_fig = np.histogram2d(df_pca_WT['PC1'], df_pca_WT['PC2'], \n",
    "                         bins=binedges)\n",
    "max_shade = WT_fig[0].max()\n",
    "PC1_2_colormap = plt.figure(figsize=(14.5,9))\n",
    "plt.subplot(1, 2, 1)\n",
    "PC2_VCBC, PC1_VCBC = np.meshgrid(binedges,binedges) \n",
    "plt.pcolormesh(PC1_VCBC,PC2_VCBC,WT_fig[0], cmap = 'Greys', vmax = max_shade)\n",
    "plt.axis('image')\n",
    "plt.xlim([PC1min, PC1max])\n",
    "plt.ylim([PC2min, PC2max])\n",
    "\n",
    "plt.colorbar(shrink = 0.50, format=ticker.FuncFormatter(fmt))\n",
    "plt.scatter(x = df_pca_struct[\"PC1\"][0], y = df_pca_struct[\"PC2\"][0], color='k', \n",
    "         marker='x', s = 75, linewidth = 1, label = \"VCBC pdb\")\n",
    "plt.title('WT', size= 18) \n",
    "plt.xlabel('PC1',size= 16) \n",
    "plt.ylabel('PC2',size= 16)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "87d5d33a-9e21-4008-9832-ce7c4352da41",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'PC4')"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1450x900 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "binedges = np.arange(-550,550,1) # create array for bin edges\n",
    "GLU_fig = np.histogram2d(df_pca_GLU['PC3'], df_pca_GLU['PC4'], \n",
    "                         bins=binedges)\n",
    "max_shade = GLU_fig[0].max()\n",
    "PC1_2_colormap = plt.figure(figsize=(14.5,9))\n",
    "plt.subplot(1, 2, 1)\n",
    "PC2_VCBC, PC1_VCBC = np.meshgrid(binedges,binedges) \n",
    "\n",
    "plt.pcolormesh(PC1_VCBC, PC2_VCBC, GLU_fig[0], cmap = 'Greys', vmax = max_shade)\n",
    "plt.axis('image')\n",
    "plt.xlim([PC3min, PC3max])\n",
    "plt.ylim([PC4min, PC4max])\n",
    "\n",
    "plt.colorbar(shrink = 0.50, format=ticker.FuncFormatter(fmt))\n",
    "plt.scatter(x = df_pca_struct[\"PC3\"][0], y = df_pca_struct[\"PC4\"][0], color='k', \n",
    "         marker='x', s = 75, linewidth = 1, label = \"VCBC pdb\")\n",
    "plt.title('GLU_mutation', size= 18) \n",
    "plt.xlabel('PC3',size= 16) \n",
    "plt.ylabel('PC4',size= 16)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "900ef0b1-1ff4-444e-9da9-3ca9300efb85",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'PC4')"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1450x900 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "binedges = np.arange(-50,45,1) # create array for bin edges\n",
    "\n",
    "WT_fig = np.histogram2d(df_pca_WT['PC3'], df_pca_WT['PC4'], \n",
    "                         bins=binedges)\n",
    "max_shade = WT_fig[0].max()\n",
    "PC1_2_colormap = plt.figure(figsize=(14.5,9))\n",
    "plt.subplot(1, 2, 1)\n",
    "PC2_VCBC, PC1_VCBC = np.meshgrid(binedges,binedges) \n",
    "plt.pcolormesh(PC1_VCBC,PC2_VCBC,WT_fig[0], cmap = 'Greys', vmax = max_shade)\n",
    "plt.axis('image')\n",
    "plt.xlim([PC3min, PC3max])\n",
    "plt.ylim([PC4min, PC4max])\n",
    "\n",
    "plt.colorbar(shrink = 0.50, format=ticker.FuncFormatter(fmt))\n",
    "plt.scatter(x = df_pca_struct[\"PC3\"][0], y = df_pca_struct[\"PC4\"][0], color='k', \n",
    "         marker='x', s = 75, linewidth = 1, label = \"VCBC pdb\")\n",
    "plt.title('WT', size= 18) \n",
    "plt.xlabel('PC3',size= 16) \n",
    "plt.ylabel('PC4',size= 16)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "be0cbc0b-3e23-472a-8862-83b9f565e8e3",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "76472c98-d963-454b-af32-bd18c420d3dc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "PC1     8.413542\n",
       "PC2     6.988178\n",
       "PC3     7.704378\n",
       "PC4     5.456853\n",
       "PC5     3.720292\n",
       "PC6     4.316317\n",
       "PC7     4.786073\n",
       "PC8     4.021960\n",
       "PC9     3.898432\n",
       "PC10    2.507365\n",
       "dtype: float32"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_pca_GLU.std()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "6b7cc237-1fb0-43e8-b39e-3159c53156b6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "PC1     9.802905\n",
       "PC2     8.839787\n",
       "PC3     6.199517\n",
       "PC4     4.800408\n",
       "PC5     5.093625\n",
       "PC6     4.385017\n",
       "PC7     3.320504\n",
       "PC8     3.678542\n",
       "PC9     2.895331\n",
       "PC10    3.762031\n",
       "dtype: float32"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_pca_WT.std()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "a2a48dca-0d37-45c3-a5fd-7e839fa8d778",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "PC1    -4.007551\n",
       "PC2    -2.667708\n",
       "PC3     2.822752\n",
       "PC4     2.441814\n",
       "PC5     2.498194\n",
       "PC6     0.159186\n",
       "PC7    -0.250468\n",
       "PC8    -0.003186\n",
       "PC9    -0.010581\n",
       "PC10   -0.086887\n",
       "dtype: float32"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_pca_GLU.mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "8c0df191-9083-4d8a-90fb-14ed9c95b6fe",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "PC1     4.007534\n",
       "PC2     2.667646\n",
       "PC3    -2.822667\n",
       "PC4    -2.441873\n",
       "PC5    -2.498159\n",
       "PC6    -0.159256\n",
       "PC7     0.250386\n",
       "PC8     0.003164\n",
       "PC9     0.010649\n",
       "PC10    0.086845\n",
       "dtype: float32"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_pca_WT.mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "5e984f21-a1ff-42bf-953d-8c2ca6a6abba",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "PC1     9.975075\n",
       "PC2     8.402625\n",
       "PC3     7.540754\n",
       "PC4     5.689723\n",
       "PC5     5.112093\n",
       "PC6     4.353693\n",
       "PC7     4.126579\n",
       "PC8     3.854059\n",
       "PC9     3.433708\n",
       "PC10    3.198018\n",
       "dtype: float32"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_pca1.std()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "ebee86a2-3afb-4b2b-a6e2-ead6ec09a2f6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "PC1     0.000008\n",
       "PC2    -0.000027\n",
       "PC3     0.000045\n",
       "PC4    -0.000025\n",
       "PC5     0.000024\n",
       "PC6    -0.000036\n",
       "PC7    -0.000041\n",
       "PC8    -0.000011\n",
       "PC9     0.000034\n",
       "PC10   -0.000022\n",
       "dtype: float32"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_pca1.mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "92c9d757-f93d-4515-999f-0a846ca10936",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " Amount of variance explained by top ten components: [99.50207815 70.60404275 56.86292566 32.37293618 26.13349618 18.95464015\n",
      " 17.02865525 14.85376671 11.79034938 10.22730315]\n",
      "\n",
      " Percentage of variance explained by the top ten components: [0.20387937 0.14466741 0.11651191 0.06633202 0.05354743 0.03883798\n",
      " 0.03489165 0.03043531 0.02415838 0.0209557 ]\n",
      "\n",
      " Cumulative variance explained by the top ten components: [0.20387937 0.34854678 0.46505869 0.53139071 0.58493814 0.62377613\n",
      " 0.65866778 0.68910309 0.71326147 0.73421717]\n"
     ]
    }
   ],
   "source": [
    "#The amount of variance explained by each of the selected components. The variance estimation uses n_samples - 1 degrees of freedom.\n",
    "#Equal to n_components largest eigenvalues of the covariance matrix of X.\n",
    "print (f\" Amount of variance explained by top ten components: {pca.explained_variance_}\")\n",
    "print()\n",
    "\n",
    "# Percentage of variance explained by each of the selected components.\n",
    "# If n_components is not set then all components are stored and the sum of the ratios is equal to 1.0.\n",
    "print (f\" Percentage of variance explained by the top ten components: {pca.explained_variance_ratio_}\")\n",
    "print()\n",
    "\n",
    "# returns a vector x such that x[i] returns the cumulative variance explained by the first i+1 dimensions.\n",
    "# https://stackoverflow.com/questions/32857029/python-scikit-learn-pca-explained-variance-ratio-cutoff\n",
    "print (f\" Cumulative variance explained by the top ten components: {pca.explained_variance_ratio_.cumsum()}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2627f518-8f98-433d-ae31-e32e5598e627",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "c400041a-1606-45c7-8f59-f8c1fb70f8c5",
   "metadata": {},
   "source": [
    "## P values"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a2f8982-8c9d-478e-a458-452ab36bcb84",
   "metadata": {},
   "source": [
    "Adapted from \"Permutation_PCA\" notebook"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5632349b-979e-4598-9ada-ab2541591d9e",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "df1e7ae4-a0ab-4997-8e88-f6944dd65414",
   "metadata": {},
   "outputs": [],
   "source": [
    "GLU_pca = df_pca_GLU\n",
    "WT_pca = df_pca_WT\n",
    "pdb_PCA = df_pca_struct"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "058ad5f8-0807-40b3-ab65-c1947946adf4",
   "metadata": {},
   "outputs": [],
   "source": [
    "GLU_Mean_std_PC1and2 = {\"Simulation\":[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\"],\n",
    "                    'Mean_PC1':[GLU_pca['PC1'][1:6000:10].mean(),\n",
    "                    GLU_pca['PC1'][6001:12000:10].mean(),\n",
    "                    GLU_pca['PC1'][12001:18000:10].mean(),\n",
    "                    GLU_pca['PC1'][18001:24000:10].mean(),\n",
    "                    GLU_pca['PC1'][24001:30000:10].mean(),\n",
    "                    GLU_pca['PC1'][30001:36000:10].mean(),\n",
    "                    GLU_pca['PC1'][36001:42000:10].mean(),\n",
    "                    GLU_pca['PC1'][42001:48000:10].mean()], \n",
    "     'Variance_PC1':[GLU_pca['PC1'][1:6000:10].var(),\n",
    "                    GLU_pca['PC1'][6001:12000:10].var(),\n",
    "                    GLU_pca['PC1'][12001:18000:10].var(),\n",
    "                    GLU_pca['PC1'][18001:24000:10].var(),\n",
    "                    GLU_pca['PC1'][24001:30000:10].var(),\n",
    "                    GLU_pca['PC1'][30001:36000:10].var(),\n",
    "                    GLU_pca['PC1'][36001:42000:10].var(),\n",
    "                    GLU_pca['PC1'][42001:48000:10].var()],\n",
    "     'Mean_PC2': [GLU_pca['PC2'][1:6000:10].mean(),\n",
    "                    GLU_pca['PC2'][6001:12000:10].mean(),\n",
    "                    GLU_pca['PC2'][12001:18000:10].mean(),\n",
    "                    GLU_pca['PC2'][18001:24000:10].mean(),\n",
    "                    GLU_pca['PC2'][24001:30000:10].mean(),\n",
    "                    GLU_pca['PC2'][30001:36000:10].mean(),\n",
    "                    GLU_pca['PC2'][36001:42000:10].mean(),\n",
    "                    GLU_pca['PC2'][42001:48000:10].mean()],\n",
    "     \"Variance_PC2\":[GLU_pca['PC2'][1:6000:10].var(),\n",
    "                    GLU_pca['PC2'][6001:12000:10].var(),\n",
    "                    GLU_pca['PC2'][12001:18000:10].var(),\n",
    "                    GLU_pca['PC2'][18001:24000:10].var(),\n",
    "                    GLU_pca['PC2'][24001:30000:10].var(),\n",
    "                    GLU_pca['PC2'][30001:36000:10].var(),\n",
    "                    GLU_pca['PC2'][36001:42000:10].var(),\n",
    "                    GLU_pca['PC2'][42001:48000:10].var()],\n",
    "     'Mean_PC3': [GLU_pca['PC3'][1:6000:10].mean(),\n",
    "                    GLU_pca['PC3'][6001:12000:10].mean(),\n",
    "                    GLU_pca['PC3'][12001:18000:10].mean(),\n",
    "                    GLU_pca['PC3'][18001:24000:10].mean(),\n",
    "                    GLU_pca['PC3'][24001:30000:10].mean(),\n",
    "                    GLU_pca['PC3'][30001:36000:10].mean(),\n",
    "                    GLU_pca['PC3'][36001:42000:10].mean(),\n",
    "                    GLU_pca['PC3'][42001:48000:10].mean()],\n",
    "     \"Variance_PC3\":[GLU_pca['PC3'][1:6000:10].var(),\n",
    "                    GLU_pca['PC3'][6001:12000:10].var(),\n",
    "                    GLU_pca['PC3'][12001:18000:10].var(),\n",
    "                    GLU_pca['PC3'][18001:24000:10].var(),\n",
    "                    GLU_pca['PC3'][24001:30000:10].var(),\n",
    "                    GLU_pca['PC3'][30001:36000:10].var(),\n",
    "                    GLU_pca['PC3'][36001:42000:10].var(),\n",
    "                    GLU_pca['PC3'][42001:48000:10].var()],\n",
    "     'Mean_PC4': [GLU_pca['PC4'][1:6000:10].mean(),\n",
    "                    GLU_pca['PC4'][6001:12000:10].mean(),\n",
    "                    GLU_pca['PC4'][12001:18000:10].mean(),\n",
    "                    GLU_pca['PC4'][18001:24000:10].mean(),\n",
    "                    GLU_pca['PC4'][24001:30000:10].mean(),\n",
    "                    GLU_pca['PC4'][30001:36000:10].mean(),\n",
    "                    GLU_pca['PC4'][36001:42000:10].mean(),\n",
    "                    GLU_pca['PC4'][42001:48000:10].mean()],\n",
    "     \"Variance_PC4\":[GLU_pca['PC4'][1:6000:10].var(),\n",
    "                    GLU_pca['PC4'][6001:12000:10].var(),\n",
    "                    GLU_pca['PC4'][12001:18000:10].var(),\n",
    "                    GLU_pca['PC4'][18001:24000:10].var(),\n",
    "                    GLU_pca['PC4'][24001:30000:10].var(),\n",
    "                    GLU_pca['PC4'][30001:36000:10].var(),\n",
    "                    GLU_pca['PC4'][36001:42000:10].var(),\n",
    "                    GLU_pca['PC4'][42001:48000:10].var()],\n",
    "            \"PDB_PC1\":[pdb_PCA[\"PC1\"].values,\n",
    "                     pdb_PCA[\"PC1\"].values,\n",
    "                     pdb_PCA[\"PC1\"].values,\n",
    "                     pdb_PCA[\"PC1\"].values,\n",
    "                     pdb_PCA[\"PC1\"].values,\n",
    "                     pdb_PCA[\"PC1\"].values,\n",
    "                     pdb_PCA[\"PC1\"].values,\n",
    "                     pdb_PCA[\"PC1\"].values],\n",
    "            \"PDB_PC2\":[pdb_PCA[\"PC2\"].values,\n",
    "                     pdb_PCA[\"PC2\"].values,\n",
    "                     pdb_PCA[\"PC2\"].values,\n",
    "                     pdb_PCA[\"PC2\"].values,\n",
    "                     pdb_PCA[\"PC2\"].values,\n",
    "                     pdb_PCA[\"PC2\"].values,\n",
    "                     pdb_PCA[\"PC2\"].values,\n",
    "                     pdb_PCA[\"PC2\"].values],\n",
    "            \"PDB_PC3\":[pdb_PCA[\"PC3\"].values,\n",
    "                     pdb_PCA[\"PC3\"].values,\n",
    "                     pdb_PCA[\"PC3\"].values,\n",
    "                     pdb_PCA[\"PC3\"].values,\n",
    "                     pdb_PCA[\"PC3\"].values,\n",
    "                     pdb_PCA[\"PC3\"].values,\n",
    "                     pdb_PCA[\"PC3\"].values,\n",
    "                     pdb_PCA[\"PC3\"].values],\n",
    "            \"PDB_PC4\":[pdb_PCA[\"PC4\"].values,\n",
    "                     pdb_PCA[\"PC4\"].values,\n",
    "                     pdb_PCA[\"PC4\"].values,\n",
    "                     pdb_PCA[\"PC4\"].values,\n",
    "                     pdb_PCA[\"PC4\"].values,\n",
    "                     pdb_PCA[\"PC4\"].values,\n",
    "                     pdb_PCA[\"PC4\"].values,\n",
    "                     pdb_PCA[\"PC4\"].values],}\n",
    "GLU_Mean_std_PC1and2_df = pd.DataFrame(data = GLU_Mean_std_PC1and2)\n",
    "# GLU_Mean_std_PC1and2_df[\"Meandiffsqr_PC1\"]= (GLU_Mean_std_PC1and2_df[\"Mean_PC1\"]- GLU_Mean_std_PC1and2_df[\"PDB_PC1\"])**2\n",
    "# GLU_Mean_std_PC1and2_df[\"Meandiffsqr_PC2\"]= (GLU_Mean_std_PC1and2_df[\"Mean_PC2\"]- GLU_Mean_std_PC1and2_df[\"PDB_PC2\"])**2\n",
    "# GLU_Mean_std_PC1and2_df[\"Meandiffsqr_PC3\"]= (GLU_Mean_std_PC1and2_df[\"Mean_PC3\"]- GLU_Mean_std_PC1and2_df[\"PDB_PC3\"])**2\n",
    "# GLU_Mean_std_PC1and2_df[\"Meandiffsqr_PC4\"]= (GLU_Mean_std_PC1and2_df[\"Mean_PC4\"]- GLU_Mean_std_PC1and2_df[\"PDB_PC4\"])**2\n",
    "\n",
    "GLU_Mean_std_PC1and2_df[\"Meandiffsqr_PC1\"]= (GLU_Mean_std_PC1and2_df[\"PDB_PC1\"] -GLU_Mean_std_PC1and2_df[\"Mean_PC1\"])**2\n",
    "GLU_Mean_std_PC1and2_df[\"Meandiffsqr_PC2\"]= (GLU_Mean_std_PC1and2_df[\"PDB_PC1\"]- GLU_Mean_std_PC1and2_df[\"Mean_PC1\"])**2\n",
    "GLU_Mean_std_PC1and2_df[\"Meandiffsqr_PC3\"]= (GLU_Mean_std_PC1and2_df[\"PDB_PC1\"]- GLU_Mean_std_PC1and2_df[\"Mean_PC1\"])**2\n",
    "GLU_Mean_std_PC1and2_df[\"Meandiffsqr_PC4\"]= (GLU_Mean_std_PC1and2_df[\"PDB_PC1\"]- GLU_Mean_std_PC1and2_df[\"Mean_PC1\"])**2\n",
    "# GLU_Mean_std_PC1and2_df\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "7078b13b-b3de-440e-913b-6717df4fbb9b",
   "metadata": {},
   "outputs": [],
   "source": [
    "WT_Mean_std_PC1and2 = {\"Simulation\":[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\"],\n",
    "                    'Mean_PC1':[WT_pca['PC1'][1:6000:10].mean(),\n",
    "                    WT_pca['PC1'][6001:12000:10].mean(),\n",
    "                    WT_pca['PC1'][12001:18000:10].mean(),\n",
    "                    WT_pca['PC1'][18001:24000:10].mean(),\n",
    "                    WT_pca['PC1'][24001:30000:10].mean(),\n",
    "                    WT_pca['PC1'][30001:36000:10].mean(),\n",
    "                    WT_pca['PC1'][36001:42000:10].mean(),\n",
    "                    WT_pca['PC1'][42001:48000:10].mean()], \n",
    "     'Variance_PC1':[WT_pca['PC1'][1:6000:10].var(),\n",
    "                    WT_pca['PC1'][6001:12000:10].var(),\n",
    "                    WT_pca['PC1'][12001:18000:10].var(),\n",
    "                    WT_pca['PC1'][18001:24000:10].var(),\n",
    "                    WT_pca['PC1'][24001:30000:10].var(),\n",
    "                    WT_pca['PC1'][30001:36000:10].var(),\n",
    "                    WT_pca['PC1'][36001:42000:10].var(),\n",
    "                    WT_pca['PC1'][42001:48000:10].var()],\n",
    "     'Mean_PC2': [WT_pca['PC2'][1:6000:10].mean(),\n",
    "                    WT_pca['PC2'][6001:12000:10].mean(),\n",
    "                    WT_pca['PC2'][12001:18000:10].mean(),\n",
    "                    WT_pca['PC2'][18001:24000:10].mean(),\n",
    "                    WT_pca['PC2'][24001:30000:10].mean(),\n",
    "                    WT_pca['PC2'][30001:36000:10].mean(),\n",
    "                    WT_pca['PC2'][36001:42000:10].mean(),\n",
    "                    WT_pca['PC2'][42001:48000:10].mean()],\n",
    "     \"Variance_PC2\":[WT_pca['PC2'][1:6000:10].var(),\n",
    "                    WT_pca['PC2'][6001:12000:10].var(),\n",
    "                    WT_pca['PC2'][12001:18000:10].var(),\n",
    "                    WT_pca['PC2'][18001:24000:10].var(),\n",
    "                    WT_pca['PC2'][24001:30000:10].var(),\n",
    "                    WT_pca['PC2'][30001:36000:10].var(),\n",
    "                    WT_pca['PC2'][36001:42000:10].var(),\n",
    "                    WT_pca['PC2'][42001:48000:10].var()],\n",
    "     'Mean_PC3': [WT_pca['PC3'][1:6000:10].mean(),\n",
    "                    WT_pca['PC3'][6001:12000:10].mean(),\n",
    "                    WT_pca['PC3'][12001:18000:10].mean(),\n",
    "                    WT_pca['PC3'][18001:24000:10].mean(),\n",
    "                    WT_pca['PC3'][24001:30000:10].mean(),\n",
    "                    WT_pca['PC3'][30001:36000:10].mean(),\n",
    "                    WT_pca['PC3'][36001:42000:10].mean(),\n",
    "                    WT_pca['PC3'][42001:48000:10].mean()],\n",
    "     \"Variance_PC3\":[WT_pca['PC3'][1:6000:10].var(),\n",
    "                    WT_pca['PC3'][6001:12000:10].var(),\n",
    "                    WT_pca['PC3'][12001:18000:10].var(),\n",
    "                    WT_pca['PC3'][18001:24000:10].var(),\n",
    "                    WT_pca['PC3'][24001:30000:10].var(),\n",
    "                    WT_pca['PC3'][30001:36000:10].var(),\n",
    "                    WT_pca['PC3'][36001:42000:10].var(),\n",
    "                    WT_pca['PC3'][42001:48000:10].var()],\n",
    "     'Mean_PC4': [WT_pca['PC4'][1:6000:10].mean(),\n",
    "                    WT_pca['PC4'][6001:12000:10].mean(),\n",
    "                    WT_pca['PC4'][12001:18000:10].mean(),\n",
    "                    WT_pca['PC4'][18001:24000:10].mean(),\n",
    "                    WT_pca['PC4'][24001:30000:10].mean(),\n",
    "                    WT_pca['PC4'][30001:36000:10].mean(),\n",
    "                    WT_pca['PC4'][36001:42000:10].mean(),\n",
    "                    WT_pca['PC4'][42001:48000:10].mean()],\n",
    "     \"Variance_PC4\":[WT_pca['PC4'][1:6000:10].var(),\n",
    "                    WT_pca['PC4'][6001:12000:10].var(),\n",
    "                    WT_pca['PC4'][12001:18000:10].var(),\n",
    "                    WT_pca['PC4'][18001:24000:10].var(),\n",
    "                    WT_pca['PC4'][24001:30000:10].var(),\n",
    "                    WT_pca['PC4'][30001:36000:10].var(),\n",
    "                    WT_pca['PC4'][36001:42000:10].var(),\n",
    "                    WT_pca['PC4'][42001:48000:10].var()],\n",
    "            \"PDB_PC1\":[pdb_PCA[\"PC1\"].values,\n",
    "                     pdb_PCA[\"PC1\"].values,\n",
    "                     pdb_PCA[\"PC1\"].values,\n",
    "                     pdb_PCA[\"PC1\"].values,\n",
    "                     pdb_PCA[\"PC1\"].values,\n",
    "                     pdb_PCA[\"PC1\"].values,\n",
    "                     pdb_PCA[\"PC1\"].values,\n",
    "                     pdb_PCA[\"PC1\"].values],\n",
    "            \"PDB_PC2\":[pdb_PCA[\"PC2\"].values,\n",
    "                     pdb_PCA[\"PC2\"].values,\n",
    "                     pdb_PCA[\"PC2\"].values,\n",
    "                     pdb_PCA[\"PC2\"].values,\n",
    "                     pdb_PCA[\"PC2\"].values,\n",
    "                     pdb_PCA[\"PC2\"].values,\n",
    "                     pdb_PCA[\"PC2\"].values,\n",
    "                     pdb_PCA[\"PC2\"].values],\n",
    "            \"PDB_PC3\":[pdb_PCA[\"PC3\"].values,\n",
    "                     pdb_PCA[\"PC3\"].values,\n",
    "                     pdb_PCA[\"PC3\"].values,\n",
    "                     pdb_PCA[\"PC3\"].values,\n",
    "                     pdb_PCA[\"PC3\"].values,\n",
    "                     pdb_PCA[\"PC3\"].values,\n",
    "                     pdb_PCA[\"PC3\"].values,\n",
    "                     pdb_PCA[\"PC3\"].values],\n",
    "            \"PDB_PC4\":[pdb_PCA[\"PC4\"].values,\n",
    "                     pdb_PCA[\"PC4\"].values,\n",
    "                     pdb_PCA[\"PC4\"].values,\n",
    "                     pdb_PCA[\"PC4\"].values,\n",
    "                     pdb_PCA[\"PC4\"].values,\n",
    "                     pdb_PCA[\"PC4\"].values,\n",
    "                     pdb_PCA[\"PC4\"].values,\n",
    "                     pdb_PCA[\"PC4\"].values],}\n",
    "WT_Mean_std_PC1and2_df = pd.DataFrame(data = WT_Mean_std_PC1and2)\n",
    "# WT_Mean_std_PC1and2_df[\"Meandiffsqr_PC1\"]= (WT_Mean_std_PC1and2_df[\"Mean_PC1\"]- WT_Mean_std_PC1and2_df[\"PDB_PC1\"])**2\n",
    "# WT_Mean_std_PC1and2_df[\"Meandiffsqr_PC2\"]= (WT_Mean_std_PC1and2_df[\"Mean_PC2\"]- WT_Mean_std_PC1and2_df[\"PDB_PC2\"])**2\n",
    "# WT_Mean_std_PC1and2_df[\"Meandiffsqr_PC3\"]= (WT_Mean_std_PC1and2_df[\"Mean_PC3\"]- WT_Mean_std_PC1and2_df[\"PDB_PC3\"])**2\n",
    "# WT_Mean_std_PC1and2_df[\"Meandiffsqr_PC4\"]= (WT_Mean_std_PC1and2_df[\"Mean_PC4\"]- WT_Mean_std_PC1and2_df[\"PDB_PC4\"])**2\n",
    "\n",
    "WT_Mean_std_PC1and2_df[\"Meandiffsqr_PC1\"]= (WT_Mean_std_PC1and2_df[\"PDB_PC1\"]- WT_Mean_std_PC1and2_df[\"Mean_PC1\"])**2\n",
    "WT_Mean_std_PC1and2_df[\"Meandiffsqr_PC2\"]= (WT_Mean_std_PC1and2_df[\"PDB_PC1\"]- WT_Mean_std_PC1and2_df[\"Mean_PC1\"])**2\n",
    "WT_Mean_std_PC1and2_df[\"Meandiffsqr_PC3\"]= (WT_Mean_std_PC1and2_df[\"PDB_PC1\"]- WT_Mean_std_PC1and2_df[\"Mean_PC1\"])**2\n",
    "WT_Mean_std_PC1and2_df[\"Meandiffsqr_PC4\"]= (WT_Mean_std_PC1and2_df[\"PDB_PC1\"]- WT_Mean_std_PC1and2_df[\"Mean_PC1\"])**2\n",
    "# WT_Mean_std_PC1and2_df\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "242b06d4-9002-40a5-ba33-8690e902cd8b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Simulation</th>\n",
       "      <th>Mean_PC1</th>\n",
       "      <th>Variance_PC1</th>\n",
       "      <th>Mean_PC2</th>\n",
       "      <th>Variance_PC2</th>\n",
       "      <th>Mean_PC3</th>\n",
       "      <th>Variance_PC3</th>\n",
       "      <th>Mean_PC4</th>\n",
       "      <th>Variance_PC4</th>\n",
       "      <th>PDB_PC1</th>\n",
       "      <th>PDB_PC2</th>\n",
       "      <th>PDB_PC3</th>\n",
       "      <th>PDB_PC4</th>\n",
       "      <th>Meandiffsqr_PC1</th>\n",
       "      <th>Meandiffsqr_PC2</th>\n",
       "      <th>Meandiffsqr_PC3</th>\n",
       "      <th>Meandiffsqr_PC4</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>-5.392547</td>\n",
       "      <td>42.733208</td>\n",
       "      <td>-2.316336</td>\n",
       "      <td>25.748859</td>\n",
       "      <td>-2.902206</td>\n",
       "      <td>11.024086</td>\n",
       "      <td>2.672271</td>\n",
       "      <td>2.117867</td>\n",
       "      <td>[-14.959696]</td>\n",
       "      <td>[67.78671]</td>\n",
       "      <td>[11.538955]</td>\n",
       "      <td>[29.569107]</td>\n",
       "      <td>[91.53033]</td>\n",
       "      <td>[91.53033]</td>\n",
       "      <td>[91.53033]</td>\n",
       "      <td>[91.53033]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>-1.755755</td>\n",
       "      <td>31.952204</td>\n",
       "      <td>-5.487245</td>\n",
       "      <td>20.304556</td>\n",
       "      <td>0.332966</td>\n",
       "      <td>11.163137</td>\n",
       "      <td>8.279777</td>\n",
       "      <td>11.105876</td>\n",
       "      <td>[-14.959696]</td>\n",
       "      <td>[67.78671]</td>\n",
       "      <td>[11.538955]</td>\n",
       "      <td>[29.569107]</td>\n",
       "      <td>[174.34407]</td>\n",
       "      <td>[174.34407]</td>\n",
       "      <td>[174.34407]</td>\n",
       "      <td>[174.34407]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>-0.769008</td>\n",
       "      <td>86.162918</td>\n",
       "      <td>-9.622038</td>\n",
       "      <td>27.633879</td>\n",
       "      <td>5.348662</td>\n",
       "      <td>12.066516</td>\n",
       "      <td>-1.131269</td>\n",
       "      <td>6.829662</td>\n",
       "      <td>[-14.959696]</td>\n",
       "      <td>[67.78671]</td>\n",
       "      <td>[11.538955]</td>\n",
       "      <td>[29.569107]</td>\n",
       "      <td>[201.3756]</td>\n",
       "      <td>[201.3756]</td>\n",
       "      <td>[201.3756]</td>\n",
       "      <td>[201.3756]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>-4.682937</td>\n",
       "      <td>44.013474</td>\n",
       "      <td>-1.859908</td>\n",
       "      <td>53.966347</td>\n",
       "      <td>18.053772</td>\n",
       "      <td>27.709978</td>\n",
       "      <td>-1.922621</td>\n",
       "      <td>5.692865</td>\n",
       "      <td>[-14.959696]</td>\n",
       "      <td>[67.78671]</td>\n",
       "      <td>[11.538955]</td>\n",
       "      <td>[29.569107]</td>\n",
       "      <td>[105.611755]</td>\n",
       "      <td>[105.611755]</td>\n",
       "      <td>[105.611755]</td>\n",
       "      <td>[105.611755]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>-11.750175</td>\n",
       "      <td>54.280434</td>\n",
       "      <td>3.109496</td>\n",
       "      <td>13.950500</td>\n",
       "      <td>1.237392</td>\n",
       "      <td>15.246968</td>\n",
       "      <td>5.397556</td>\n",
       "      <td>5.608145</td>\n",
       "      <td>[-14.959696]</td>\n",
       "      <td>[67.78671]</td>\n",
       "      <td>[11.538955]</td>\n",
       "      <td>[29.569107]</td>\n",
       "      <td>[10.301027]</td>\n",
       "      <td>[10.301027]</td>\n",
       "      <td>[10.301027]</td>\n",
       "      <td>[10.301027]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6</td>\n",
       "      <td>0.616477</td>\n",
       "      <td>49.254364</td>\n",
       "      <td>3.761161</td>\n",
       "      <td>18.386143</td>\n",
       "      <td>4.375306</td>\n",
       "      <td>14.846920</td>\n",
       "      <td>6.631083</td>\n",
       "      <td>5.561971</td>\n",
       "      <td>[-14.959696]</td>\n",
       "      <td>[67.78671]</td>\n",
       "      <td>[11.538955]</td>\n",
       "      <td>[29.569107]</td>\n",
       "      <td>[242.61716]</td>\n",
       "      <td>[242.61716]</td>\n",
       "      <td>[242.61716]</td>\n",
       "      <td>[242.61716]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>7</td>\n",
       "      <td>-9.049924</td>\n",
       "      <td>44.983311</td>\n",
       "      <td>-0.806725</td>\n",
       "      <td>29.129360</td>\n",
       "      <td>-4.832613</td>\n",
       "      <td>25.301231</td>\n",
       "      <td>4.595584</td>\n",
       "      <td>23.025223</td>\n",
       "      <td>[-14.959696]</td>\n",
       "      <td>[67.78671]</td>\n",
       "      <td>[11.538955]</td>\n",
       "      <td>[29.569107]</td>\n",
       "      <td>[34.925404]</td>\n",
       "      <td>[34.925404]</td>\n",
       "      <td>[34.925404]</td>\n",
       "      <td>[34.925404]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>8</td>\n",
       "      <td>0.706644</td>\n",
       "      <td>65.419655</td>\n",
       "      <td>-8.203006</td>\n",
       "      <td>35.507904</td>\n",
       "      <td>0.871872</td>\n",
       "      <td>13.560743</td>\n",
       "      <td>-5.069839</td>\n",
       "      <td>23.313595</td>\n",
       "      <td>[-14.959696]</td>\n",
       "      <td>[67.78671]</td>\n",
       "      <td>[11.538955]</td>\n",
       "      <td>[29.569107]</td>\n",
       "      <td>[245.4342]</td>\n",
       "      <td>[245.4342]</td>\n",
       "      <td>[245.4342]</td>\n",
       "      <td>[245.4342]</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Simulation   Mean_PC1  Variance_PC1  Mean_PC2  Variance_PC2   Mean_PC3  \\\n",
       "0          1  -5.392547     42.733208 -2.316336     25.748859  -2.902206   \n",
       "1          2  -1.755755     31.952204 -5.487245     20.304556   0.332966   \n",
       "2          3  -0.769008     86.162918 -9.622038     27.633879   5.348662   \n",
       "3          4  -4.682937     44.013474 -1.859908     53.966347  18.053772   \n",
       "4          5 -11.750175     54.280434  3.109496     13.950500   1.237392   \n",
       "5          6   0.616477     49.254364  3.761161     18.386143   4.375306   \n",
       "6          7  -9.049924     44.983311 -0.806725     29.129360  -4.832613   \n",
       "7          8   0.706644     65.419655 -8.203006     35.507904   0.871872   \n",
       "\n",
       "   Variance_PC3  Mean_PC4  Variance_PC4       PDB_PC1     PDB_PC2  \\\n",
       "0     11.024086  2.672271      2.117867  [-14.959696]  [67.78671]   \n",
       "1     11.163137  8.279777     11.105876  [-14.959696]  [67.78671]   \n",
       "2     12.066516 -1.131269      6.829662  [-14.959696]  [67.78671]   \n",
       "3     27.709978 -1.922621      5.692865  [-14.959696]  [67.78671]   \n",
       "4     15.246968  5.397556      5.608145  [-14.959696]  [67.78671]   \n",
       "5     14.846920  6.631083      5.561971  [-14.959696]  [67.78671]   \n",
       "6     25.301231  4.595584     23.025223  [-14.959696]  [67.78671]   \n",
       "7     13.560743 -5.069839     23.313595  [-14.959696]  [67.78671]   \n",
       "\n",
       "       PDB_PC3      PDB_PC4 Meandiffsqr_PC1 Meandiffsqr_PC2 Meandiffsqr_PC3  \\\n",
       "0  [11.538955]  [29.569107]      [91.53033]      [91.53033]      [91.53033]   \n",
       "1  [11.538955]  [29.569107]     [174.34407]     [174.34407]     [174.34407]   \n",
       "2  [11.538955]  [29.569107]      [201.3756]      [201.3756]      [201.3756]   \n",
       "3  [11.538955]  [29.569107]    [105.611755]    [105.611755]    [105.611755]   \n",
       "4  [11.538955]  [29.569107]     [10.301027]     [10.301027]     [10.301027]   \n",
       "5  [11.538955]  [29.569107]     [242.61716]     [242.61716]     [242.61716]   \n",
       "6  [11.538955]  [29.569107]     [34.925404]     [34.925404]     [34.925404]   \n",
       "7  [11.538955]  [29.569107]      [245.4342]      [245.4342]      [245.4342]   \n",
       "\n",
       "  Meandiffsqr_PC4  \n",
       "0      [91.53033]  \n",
       "1     [174.34407]  \n",
       "2      [201.3756]  \n",
       "3    [105.611755]  \n",
       "4     [10.301027]  \n",
       "5     [242.61716]  \n",
       "6     [34.925404]  \n",
       "7      [245.4342]  "
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "GLU_Mean_std_PC1and2_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "e09f3ce0-9d78-49d8-9b85-4cfdd9abac4d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Simulation</th>\n",
       "      <th>Mean_PC1</th>\n",
       "      <th>Variance_PC1</th>\n",
       "      <th>Mean_PC2</th>\n",
       "      <th>Variance_PC2</th>\n",
       "      <th>Mean_PC3</th>\n",
       "      <th>Variance_PC3</th>\n",
       "      <th>Mean_PC4</th>\n",
       "      <th>Variance_PC4</th>\n",
       "      <th>PDB_PC1</th>\n",
       "      <th>PDB_PC2</th>\n",
       "      <th>PDB_PC3</th>\n",
       "      <th>PDB_PC4</th>\n",
       "      <th>Meandiffsqr_PC1</th>\n",
       "      <th>Meandiffsqr_PC2</th>\n",
       "      <th>Meandiffsqr_PC3</th>\n",
       "      <th>Meandiffsqr_PC4</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0.311147</td>\n",
       "      <td>36.481628</td>\n",
       "      <td>6.484200</td>\n",
       "      <td>17.510529</td>\n",
       "      <td>3.646971</td>\n",
       "      <td>19.971359</td>\n",
       "      <td>-7.185292</td>\n",
       "      <td>6.862500</td>\n",
       "      <td>[-14.959696]</td>\n",
       "      <td>[67.78671]</td>\n",
       "      <td>[11.538955]</td>\n",
       "      <td>[29.569107]</td>\n",
       "      <td>[233.19865]</td>\n",
       "      <td>[233.19865]</td>\n",
       "      <td>[233.19865]</td>\n",
       "      <td>[233.19865]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>9.230249</td>\n",
       "      <td>57.223618</td>\n",
       "      <td>-4.455148</td>\n",
       "      <td>49.705654</td>\n",
       "      <td>-3.327614</td>\n",
       "      <td>19.655067</td>\n",
       "      <td>0.683704</td>\n",
       "      <td>6.194559</td>\n",
       "      <td>[-14.959696]</td>\n",
       "      <td>[67.78671]</td>\n",
       "      <td>[11.538955]</td>\n",
       "      <td>[29.569107]</td>\n",
       "      <td>[585.15344]</td>\n",
       "      <td>[585.15344]</td>\n",
       "      <td>[585.15344]</td>\n",
       "      <td>[585.15344]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>-8.934500</td>\n",
       "      <td>45.009014</td>\n",
       "      <td>-2.973021</td>\n",
       "      <td>43.542305</td>\n",
       "      <td>-10.587673</td>\n",
       "      <td>11.478501</td>\n",
       "      <td>-7.704093</td>\n",
       "      <td>8.344053</td>\n",
       "      <td>[-14.959696]</td>\n",
       "      <td>[67.78671]</td>\n",
       "      <td>[11.538955]</td>\n",
       "      <td>[29.569107]</td>\n",
       "      <td>[36.302986]</td>\n",
       "      <td>[36.302986]</td>\n",
       "      <td>[36.302986]</td>\n",
       "      <td>[36.302986]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>2.670734</td>\n",
       "      <td>58.104092</td>\n",
       "      <td>6.692315</td>\n",
       "      <td>27.850935</td>\n",
       "      <td>-1.324589</td>\n",
       "      <td>10.925726</td>\n",
       "      <td>-0.094988</td>\n",
       "      <td>5.665909</td>\n",
       "      <td>[-14.959696]</td>\n",
       "      <td>[67.78671]</td>\n",
       "      <td>[11.538955]</td>\n",
       "      <td>[29.569107]</td>\n",
       "      <td>[310.83206]</td>\n",
       "      <td>[310.83206]</td>\n",
       "      <td>[310.83206]</td>\n",
       "      <td>[310.83206]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>9.408761</td>\n",
       "      <td>58.196419</td>\n",
       "      <td>12.820192</td>\n",
       "      <td>34.164608</td>\n",
       "      <td>-9.168188</td>\n",
       "      <td>13.635145</td>\n",
       "      <td>-0.659720</td>\n",
       "      <td>4.960084</td>\n",
       "      <td>[-14.959696]</td>\n",
       "      <td>[67.78671]</td>\n",
       "      <td>[11.538955]</td>\n",
       "      <td>[29.569107]</td>\n",
       "      <td>[593.8217]</td>\n",
       "      <td>[593.8217]</td>\n",
       "      <td>[593.8217]</td>\n",
       "      <td>[593.8217]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6</td>\n",
       "      <td>3.172508</td>\n",
       "      <td>40.021618</td>\n",
       "      <td>2.895988</td>\n",
       "      <td>20.592083</td>\n",
       "      <td>3.559266</td>\n",
       "      <td>12.185448</td>\n",
       "      <td>-6.218908</td>\n",
       "      <td>5.980386</td>\n",
       "      <td>[-14.959696]</td>\n",
       "      <td>[67.78671]</td>\n",
       "      <td>[11.538955]</td>\n",
       "      <td>[29.569107]</td>\n",
       "      <td>[328.77682]</td>\n",
       "      <td>[328.77682]</td>\n",
       "      <td>[328.77682]</td>\n",
       "      <td>[328.77682]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>7</td>\n",
       "      <td>15.489079</td>\n",
       "      <td>41.183495</td>\n",
       "      <td>-7.797379</td>\n",
       "      <td>55.346443</td>\n",
       "      <td>-4.832411</td>\n",
       "      <td>13.748040</td>\n",
       "      <td>-1.266005</td>\n",
       "      <td>3.807851</td>\n",
       "      <td>[-14.959696]</td>\n",
       "      <td>[67.78671]</td>\n",
       "      <td>[11.538955]</td>\n",
       "      <td>[29.569107]</td>\n",
       "      <td>[927.12787]</td>\n",
       "      <td>[927.12787]</td>\n",
       "      <td>[927.12787]</td>\n",
       "      <td>[927.12787]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>8</td>\n",
       "      <td>0.519270</td>\n",
       "      <td>46.590946</td>\n",
       "      <td>7.756758</td>\n",
       "      <td>24.452166</td>\n",
       "      <td>-0.618381</td>\n",
       "      <td>11.679129</td>\n",
       "      <td>2.880797</td>\n",
       "      <td>29.658279</td>\n",
       "      <td>[-14.959696]</td>\n",
       "      <td>[67.78671]</td>\n",
       "      <td>[11.538955]</td>\n",
       "      <td>[29.569107]</td>\n",
       "      <td>[239.59837]</td>\n",
       "      <td>[239.59837]</td>\n",
       "      <td>[239.59837]</td>\n",
       "      <td>[239.59837]</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Simulation   Mean_PC1  Variance_PC1   Mean_PC2  Variance_PC2   Mean_PC3  \\\n",
       "0          1   0.311147     36.481628   6.484200     17.510529   3.646971   \n",
       "1          2   9.230249     57.223618  -4.455148     49.705654  -3.327614   \n",
       "2          3  -8.934500     45.009014  -2.973021     43.542305 -10.587673   \n",
       "3          4   2.670734     58.104092   6.692315     27.850935  -1.324589   \n",
       "4          5   9.408761     58.196419  12.820192     34.164608  -9.168188   \n",
       "5          6   3.172508     40.021618   2.895988     20.592083   3.559266   \n",
       "6          7  15.489079     41.183495  -7.797379     55.346443  -4.832411   \n",
       "7          8   0.519270     46.590946   7.756758     24.452166  -0.618381   \n",
       "\n",
       "   Variance_PC3  Mean_PC4  Variance_PC4       PDB_PC1     PDB_PC2  \\\n",
       "0     19.971359 -7.185292      6.862500  [-14.959696]  [67.78671]   \n",
       "1     19.655067  0.683704      6.194559  [-14.959696]  [67.78671]   \n",
       "2     11.478501 -7.704093      8.344053  [-14.959696]  [67.78671]   \n",
       "3     10.925726 -0.094988      5.665909  [-14.959696]  [67.78671]   \n",
       "4     13.635145 -0.659720      4.960084  [-14.959696]  [67.78671]   \n",
       "5     12.185448 -6.218908      5.980386  [-14.959696]  [67.78671]   \n",
       "6     13.748040 -1.266005      3.807851  [-14.959696]  [67.78671]   \n",
       "7     11.679129  2.880797     29.658279  [-14.959696]  [67.78671]   \n",
       "\n",
       "       PDB_PC3      PDB_PC4 Meandiffsqr_PC1 Meandiffsqr_PC2 Meandiffsqr_PC3  \\\n",
       "0  [11.538955]  [29.569107]     [233.19865]     [233.19865]     [233.19865]   \n",
       "1  [11.538955]  [29.569107]     [585.15344]     [585.15344]     [585.15344]   \n",
       "2  [11.538955]  [29.569107]     [36.302986]     [36.302986]     [36.302986]   \n",
       "3  [11.538955]  [29.569107]     [310.83206]     [310.83206]     [310.83206]   \n",
       "4  [11.538955]  [29.569107]      [593.8217]      [593.8217]      [593.8217]   \n",
       "5  [11.538955]  [29.569107]     [328.77682]     [328.77682]     [328.77682]   \n",
       "6  [11.538955]  [29.569107]     [927.12787]     [927.12787]     [927.12787]   \n",
       "7  [11.538955]  [29.569107]     [239.59837]     [239.59837]     [239.59837]   \n",
       "\n",
       "  Meandiffsqr_PC4  \n",
       "0     [233.19865]  \n",
       "1     [585.15344]  \n",
       "2     [36.302986]  \n",
       "3     [310.83206]  \n",
       "4      [593.8217]  \n",
       "5     [328.77682]  \n",
       "6     [927.12787]  \n",
       "7     [239.59837]  "
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "WT_Mean_std_PC1and2_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "1e7a3f4d-650c-4b42-bbc9-9b6c3c6a11f5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.0082355\n",
      "7300\n",
      "p-value variance PC1 =  0.73002699730027\n"
     ]
    }
   ],
   "source": [
    "#define our variance data for pc1\n",
    "Variance_PC1= np.concatenate([GLU_Mean_std_PC1and2_df[\"Variance_PC1\"].values,\n",
    "                              WT_Mean_std_PC1and2_df[\"Variance_PC1\"].values])\n",
    "#calculate the variance ratio for real groups VCBC-Cul5/VCBC\n",
    "varianceratio_pc1_data = np.sum(Variance_PC1[:8]) / np.sum(Variance_PC1[8:])\n",
    "\n",
    "#sample 10000 times and calculate variance ratios\n",
    "numsample = 10000\n",
    "varianceratio_pc1_samples = [0]*numsample\n",
    "varianceratio_pc1_samples_smaller = [0]*numsample\n",
    "for sample in range(0,len(varianceratio_pc1_samples)):\n",
    "    random_groups = np.random.permutation(Variance_PC1)\n",
    "    varianceratio_pc1_samples[sample] = np.sum(random_groups[:8]) / np.sum(random_groups[8:])\n",
    "    if varianceratio_pc1_samples[sample] <= varianceratio_pc1_data:\n",
    "        varianceratio_pc1_samples_smaller[sample] = 1\n",
    "print(np.mean(varianceratio_pc1_samples))\n",
    "print(np.sum(varianceratio_pc1_samples_smaller))\n",
    "\n",
    "#calculate p-value\n",
    "pval_variance_PC1 = (1 + np.sum(varianceratio_pc1_samples_smaller))/(numsample + 1)\n",
    "print(\"p-value variance PC1 = \" , pval_variance_PC1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "6a476a49-9de1-4a5f-aada-179fc15f14f7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.0236123\n",
      "1835\n",
      "p-value variance PC2 =  0.1835816418358164\n"
     ]
    }
   ],
   "source": [
    "#define our variance data for pc2\n",
    "Variance_PC2= np.concatenate([GLU_Mean_std_PC1and2_df[\"Variance_PC2\"].values,\n",
    "                              WT_Mean_std_PC1and2_df[\"Variance_PC2\"].values])\n",
    "#calculate the variance ratio for real groups VCBC-Cul5/VCBC\n",
    "varianceratio_pc2_data = np.sum(Variance_PC2[:8]) / np.sum(Variance_PC2[8:])\n",
    "\n",
    "#sample 10000 times and calculate variance ratios\n",
    "numsample = 10000\n",
    "varianceratio_pc2_samples = [0]*numsample\n",
    "varianceratio_pc2_samples_smaller = [0]*numsample\n",
    "for sample in range(0,len(varianceratio_pc2_samples)):\n",
    "    random_groups = np.random.permutation(Variance_PC2)\n",
    "    varianceratio_pc2_samples[sample] = np.sum(random_groups[:8]) / np.sum(random_groups[8:])\n",
    "    if varianceratio_pc2_samples[sample] <= varianceratio_pc2_data:\n",
    "        varianceratio_pc2_samples_smaller[sample] = 1\n",
    "print(np.mean(varianceratio_pc2_samples))\n",
    "print(np.sum(varianceratio_pc2_samples_smaller))\n",
    "\n",
    "#calculate p-value\n",
    "pval_variance_PC2 = (1 + np.sum(varianceratio_pc2_samples_smaller))/(numsample + 1)\n",
    "print(\"p-value variance PC2 = \" , pval_variance_PC2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "12a8bd64-a56f-4c1e-8a53-a5d445313a15",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.0167475\n",
      "7930\n",
      "p-value variance PC3 =  0.793020697930207\n"
     ]
    }
   ],
   "source": [
    "#define our variance data for pc3\n",
    "Variance_PC3= np.concatenate([GLU_Mean_std_PC1and2_df[\"Variance_PC3\"].values,\n",
    "                              WT_Mean_std_PC1and2_df[\"Variance_PC3\"].values])\n",
    "#calculate the variance ratio for real groups VCBC-Cul5/VCBC\n",
    "varianceratio_pc3_data = np.sum(Variance_PC3[:8]) / np.sum(Variance_PC3[8:])\n",
    "\n",
    "#sample 10000 times and calculate variance ratios\n",
    "numsample = 10000\n",
    "varianceratio_pc3_samples = [0]*numsample\n",
    "varianceratio_pc3_samples_smaller = [0]*numsample\n",
    "for sample in range(0,len(varianceratio_pc3_samples)):\n",
    "    random_groups = np.random.permutation(Variance_PC3)\n",
    "    varianceratio_pc3_samples[sample] = np.sum(random_groups[:8]) / np.sum(random_groups[8:])\n",
    "    if varianceratio_pc3_samples[sample] <= varianceratio_pc3_data:\n",
    "        varianceratio_pc3_samples_smaller[sample] = 1\n",
    "print(np.mean(varianceratio_pc3_samples))\n",
    "print(np.sum(varianceratio_pc3_samples_smaller))\n",
    "\n",
    "#calculate p-value\n",
    "pval_variance_PC3 = (1 + np.sum(varianceratio_pc3_samples_smaller))/(numsample + 1)\n",
    "print(\"p-value variance PC3 = \" , pval_variance_PC3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "e7c4e8cd-74a7-4278-bebc-6263aa6b83ef",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.0984997\n",
      "5912\n",
      "p-value variance PC4 =  0.5912408759124088\n"
     ]
    }
   ],
   "source": [
    "#define our variance data for pc4\n",
    "Variance_PC4= np.concatenate([GLU_Mean_std_PC1and2_df[\"Variance_PC4\"].values,\n",
    "                              WT_Mean_std_PC1and2_df[\"Variance_PC4\"].values])\n",
    "#calculate the variance ratio for real groups VCBC-Cul5/VCBC\n",
    "varianceratio_pc4_data = np.sum(Variance_PC4[:8]) / np.sum(Variance_PC4[8:])\n",
    "\n",
    "#sample 10000 times and calculate variance ratios\n",
    "numsample = 10000\n",
    "varianceratio_pc4_samples = [0]*numsample\n",
    "varianceratio_pc4_samples_smaller = [0]*numsample\n",
    "for sample in range(0,len(varianceratio_pc4_samples)):\n",
    "    random_groups = np.random.permutation(Variance_PC4)\n",
    "    varianceratio_pc4_samples[sample] = np.sum(random_groups[:8]) / np.sum(random_groups[8:])\n",
    "    if varianceratio_pc4_samples[sample] <= varianceratio_pc4_data:\n",
    "        varianceratio_pc4_samples_smaller[sample] = 1\n",
    "print(np.mean(varianceratio_pc4_samples))\n",
    "print(np.sum(varianceratio_pc4_samples_smaller))\n",
    "\n",
    "#calculate p-value\n",
    "pval_variance_PC4 = (1 + np.sum(varianceratio_pc4_samples_smaller))/(numsample + 1)\n",
    "print(\"p-value variance PC4 = \" , pval_variance_PC4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "98295e2e-93ce-43dd-9076-8c43a08a876a",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "899aef36-aed8-4981-b9c6-7481db283c94",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
